import "./chunk-G3PMV62Z.js";

// node_modules/wavesurfer.js/dist/wavesurfer.esm.js
function t(t2, e2, i2, n2) {
  return new (i2 || (i2 = Promise))(function(s2, r2) {
    function o2(t3) {
      try {
        h2(n2.next(t3));
      } catch (t4) {
        r2(t4);
      }
    }
    function a2(t3) {
      try {
        h2(n2.throw(t3));
      } catch (t4) {
        r2(t4);
      }
    }
    function h2(t3) {
      var e3;
      t3.done ? s2(t3.value) : (e3 = t3.value, e3 instanceof i2 ? e3 : new i2(function(t4) {
        t4(e3);
      })).then(o2, a2);
    }
    h2((n2 = n2.apply(t2, e2 || [])).next());
  });
}
var e = class {
  constructor() {
    this.listeners = {};
  }
  on(t2, e2, i2) {
    if (this.listeners[t2] || (this.listeners[t2] = /* @__PURE__ */ new Set()), null == i2 ? void 0 : i2.once) {
      const i3 = (...n2) => {
        this.un(t2, i3), e2(...n2);
      };
      return this.listeners[t2].add(i3), () => this.un(t2, i3);
    }
    return this.listeners[t2].add(e2), () => this.un(t2, e2);
  }
  un(t2, e2) {
    var i2;
    null === (i2 = this.listeners[t2]) || void 0 === i2 || i2.delete(e2);
  }
  once(t2, e2) {
    return this.on(t2, e2, { once: true });
  }
  unAll() {
    this.listeners = {};
  }
  emit(t2, ...e2) {
    this.listeners[t2] && this.listeners[t2].forEach((t3) => t3(...e2));
  }
};
var i = { decode: function(e2, i2) {
  return t(this, void 0, void 0, function* () {
    const t2 = new AudioContext({ sampleRate: i2 });
    try {
      return yield t2.decodeAudioData(e2);
    } finally {
      t2.close();
    }
  });
}, createBuffer: function(t2, e2) {
  if (!t2 || 0 === t2.length) throw new Error("channelData must be a non-empty array");
  if (e2 <= 0) throw new Error("duration must be greater than 0");
  if ("number" == typeof t2[0] && (t2 = [t2]), !t2[0] || 0 === t2[0].length) throw new Error("channelData must contain non-empty channel arrays");
  !function(t3) {
    const e3 = t3[0];
    if (e3.some((t4) => t4 > 1 || t4 < -1)) {
      const i3 = e3.length;
      let n2 = 0;
      for (let t4 = 0; t4 < i3; t4++) {
        const i4 = Math.abs(e3[t4]);
        i4 > n2 && (n2 = i4);
      }
      for (const e4 of t3) for (let t4 = 0; t4 < i3; t4++) e4[t4] /= n2;
    }
  }(t2);
  const i2 = t2.map((t3) => t3 instanceof Float32Array ? t3 : Float32Array.from(t3));
  return { duration: e2, length: i2[0].length, sampleRate: i2[0].length / e2, numberOfChannels: i2.length, getChannelData: (t3) => {
    const e3 = i2[t3];
    if (!e3) throw new Error(`Channel ${t3} not found`);
    return e3;
  }, copyFromChannel: AudioBuffer.prototype.copyFromChannel, copyToChannel: AudioBuffer.prototype.copyToChannel };
} };
function n(t2, e2) {
  const i2 = e2.xmlns ? document.createElementNS(e2.xmlns, t2) : document.createElement(t2);
  for (const [t3, s2] of Object.entries(e2)) if ("children" === t3 && s2) for (const [t4, e3] of Object.entries(s2)) e3 instanceof Node ? i2.appendChild(e3) : "string" == typeof e3 ? i2.appendChild(document.createTextNode(e3)) : i2.appendChild(n(t4, e3));
  else "style" === t3 ? Object.assign(i2.style, s2) : "textContent" === t3 ? i2.textContent = s2 : i2.setAttribute(t3, s2.toString());
  return i2;
}
function s(t2, e2, i2) {
  const s2 = n(t2, e2 || {});
  return null == i2 || i2.appendChild(s2), s2;
}
var r = Object.freeze({ __proto__: null, createElement: s, default: s });
var o = { fetchBlob: function(e2, i2, n2) {
  return t(this, void 0, void 0, function* () {
    const s2 = yield fetch(e2, n2);
    if (s2.status >= 400) throw new Error(`Failed to fetch ${e2}: ${s2.status} (${s2.statusText})`);
    return function(e3, i3) {
      t(this, void 0, void 0, function* () {
        if (!e3.body || !e3.headers) return;
        const t2 = e3.body.getReader(), n3 = Number(e3.headers.get("Content-Length")) || 0;
        let s3 = 0;
        const r2 = (t3) => {
          s3 += (null == t3 ? void 0 : t3.length) || 0;
          const e4 = Math.round(s3 / n3 * 100);
          i3(e4);
        };
        try {
          for (; ; ) {
            const e4 = yield t2.read();
            if (e4.done) break;
            r2(e4.value);
          }
        } catch (t3) {
          console.warn("Progress tracking error:", t3);
        }
      });
    }(s2.clone(), i2), s2.blob();
  });
} };
var a = class extends e {
  constructor(t2) {
    super(), this.isExternalMedia = false, t2.media ? (this.media = t2.media, this.isExternalMedia = true) : this.media = document.createElement("audio"), t2.mediaControls && (this.media.controls = true), t2.autoplay && (this.media.autoplay = true), null != t2.playbackRate && this.onMediaEvent("canplay", () => {
      null != t2.playbackRate && (this.media.playbackRate = t2.playbackRate);
    }, { once: true });
  }
  onMediaEvent(t2, e2, i2) {
    return this.media.addEventListener(t2, e2, i2), () => this.media.removeEventListener(t2, e2, i2);
  }
  getSrc() {
    return this.media.currentSrc || this.media.src || "";
  }
  revokeSrc() {
    const t2 = this.getSrc();
    t2.startsWith("blob:") && URL.revokeObjectURL(t2);
  }
  canPlayType(t2) {
    return "" !== this.media.canPlayType(t2);
  }
  setSrc(t2, e2) {
    const i2 = this.getSrc();
    if (t2 && i2 === t2) return;
    this.revokeSrc();
    const n2 = e2 instanceof Blob && (this.canPlayType(e2.type) || !t2) ? URL.createObjectURL(e2) : t2;
    if (i2 && this.media.removeAttribute("src"), n2 || t2) try {
      this.media.src = n2;
    } catch (e3) {
      this.media.src = t2;
    }
  }
  destroy() {
    this.isExternalMedia || (this.media.pause(), this.revokeSrc(), this.media.removeAttribute("src"), this.media.load(), this.media.remove());
  }
  setMediaElement(t2) {
    this.media = t2;
  }
  play() {
    return t(this, void 0, void 0, function* () {
      try {
        return yield this.media.play();
      } catch (t2) {
        if (t2 instanceof DOMException && "AbortError" === t2.name) return;
        throw t2;
      }
    });
  }
  pause() {
    this.media.pause();
  }
  isPlaying() {
    return !this.media.paused && !this.media.ended;
  }
  setTime(t2) {
    this.media.currentTime = Math.max(0, Math.min(t2, this.getDuration()));
  }
  getDuration() {
    return this.media.duration;
  }
  getCurrentTime() {
    return this.media.currentTime;
  }
  getVolume() {
    return this.media.volume;
  }
  setVolume(t2) {
    this.media.volume = t2;
  }
  getMuted() {
    return this.media.muted;
  }
  setMuted(t2) {
    this.media.muted = t2;
  }
  getPlaybackRate() {
    return this.media.playbackRate;
  }
  isSeeking() {
    return this.media.seeking;
  }
  setPlaybackRate(t2, e2) {
    null != e2 && (this.media.preservesPitch = e2), this.media.playbackRate = t2;
  }
  getMediaElement() {
    return this.media;
  }
  setSinkId(t2) {
    return this.media.setSinkId(t2);
  }
};
function h(t2) {
  return t2 < 0 ? 0 : t2 > 1 ? 1 : t2;
}
function l({ maxTop: t2, maxBottom: e2, halfHeight: i2, vScale: n2 }) {
  const s2 = Math.round(t2 * i2 * n2);
  return { topHeight: s2, totalHeight: s2 + Math.round(e2 * i2 * n2) || 1 };
}
function c({ barAlign: t2, halfHeight: e2, topHeight: i2, totalHeight: n2, canvasHeight: s2 }) {
  return "top" === t2 ? 0 : "bottom" === t2 ? s2 - n2 : e2 - i2;
}
function d(t2, e2, i2) {
  const n2 = e2 - t2.left, s2 = i2 - t2.top;
  return [n2 / t2.width, s2 / t2.height];
}
function u(t2) {
  return Boolean(t2.barWidth || t2.barGap || t2.barAlign);
}
function p(t2, e2) {
  if (!u(e2)) return t2;
  const i2 = e2.barWidth || 0.5, n2 = i2 + (e2.barGap || i2 / 2);
  return 0 === n2 ? t2 : Math.floor(t2 / n2) * n2;
}
function m({ scrollLeft: t2, totalWidth: e2, numCanvases: i2 }) {
  if (0 === e2) return [0];
  const n2 = t2 / e2, s2 = Math.floor(n2 * i2);
  return [s2 - 1, s2, s2 + 1];
}
function f({ scrollLeft: t2, clientWidth: e2, scrollWidth: i2 }) {
  if (0 === i2) return { startX: 0, endX: 0 };
  return { startX: t2 / i2, endX: (t2 + e2) / i2 };
}
var g = class extends e {
  constructor(t2, e2) {
    super(), this.timeouts = [], this.isScrollable = false, this.audioData = null, this.resizeObserver = null, this.lastContainerWidth = 0, this.isDragging = false, this.subscriptions = [], this.unsubscribeOnScroll = [], this.dragUnsubscribe = null, this.subscriptions = [], this.options = t2;
    const i2 = this.parentFromOptionsContainer(t2.container);
    this.parent = i2;
    const [n2, s2] = this.initHtml();
    i2.appendChild(n2), this.container = n2, this.scrollContainer = s2.querySelector(".scroll"), this.wrapper = s2.querySelector(".wrapper"), this.canvasWrapper = s2.querySelector(".canvases"), this.progressWrapper = s2.querySelector(".progress"), this.cursor = s2.querySelector(".cursor"), e2 && s2.appendChild(e2), this.initEvents();
  }
  parentFromOptionsContainer(t2) {
    let e2;
    if ("string" == typeof t2 ? e2 = document.querySelector(t2) : t2 instanceof HTMLElement && (e2 = t2), !e2) throw new Error("Container not found");
    return e2;
  }
  initEvents() {
    if (this.wrapper.addEventListener("click", (t2) => {
      const e2 = this.wrapper.getBoundingClientRect(), [i2, n2] = d(e2, t2.clientX, t2.clientY);
      this.emit("click", i2, n2);
    }), this.wrapper.addEventListener("dblclick", (t2) => {
      const e2 = this.wrapper.getBoundingClientRect(), [i2, n2] = d(e2, t2.clientX, t2.clientY);
      this.emit("dblclick", i2, n2);
    }), true !== this.options.dragToSeek && "object" != typeof this.options.dragToSeek || this.initDrag(), this.scrollContainer.addEventListener("scroll", () => {
      const { scrollLeft: t2, scrollWidth: e2, clientWidth: i2 } = this.scrollContainer, { startX: n2, endX: s2 } = f({ scrollLeft: t2, scrollWidth: e2, clientWidth: i2 });
      this.emit("scroll", n2, s2, t2, t2 + i2);
    }), "function" == typeof ResizeObserver) {
      const t2 = this.createDelay(100);
      this.resizeObserver = new ResizeObserver(() => {
        t2().then(() => this.onContainerResize()).catch(() => {
        });
      }), this.resizeObserver.observe(this.scrollContainer);
    }
  }
  onContainerResize() {
    const t2 = this.parent.clientWidth;
    t2 === this.lastContainerWidth && "auto" !== this.options.height || (this.lastContainerWidth = t2, this.reRender(), this.emit("resize"));
  }
  initDrag() {
    this.dragUnsubscribe || (this.dragUnsubscribe = function(t2, e2, i2, n2, s2 = 3, r2 = 0, o2 = 100) {
      if (!t2) return () => {
      };
      const a2 = /* @__PURE__ */ new Map(), h2 = matchMedia("(pointer: coarse)").matches;
      let l2 = () => {
      };
      const c2 = (c3) => {
        if (c3.button !== r2) return;
        if (a2.set(c3.pointerId, c3), a2.size > 1) return;
        let d2 = c3.clientX, u2 = c3.clientY, p2 = false;
        const m2 = Date.now(), f2 = (n3) => {
          if (n3.defaultPrevented || a2.size > 1) return;
          if (h2 && Date.now() - m2 < o2) return;
          const r3 = n3.clientX, l3 = n3.clientY, c4 = r3 - d2, f3 = l3 - u2;
          if (p2 || Math.abs(c4) > s2 || Math.abs(f3) > s2) {
            n3.preventDefault(), n3.stopPropagation();
            const s3 = t2.getBoundingClientRect(), { left: o3, top: a3 } = s3;
            p2 || (null == i2 || i2(d2 - o3, u2 - a3), p2 = true), e2(c4, f3, r3 - o3, l3 - a3), d2 = r3, u2 = l3;
          }
        }, g2 = (e3) => {
          if (a2.delete(e3.pointerId), p2) {
            const i3 = e3.clientX, s3 = e3.clientY, r3 = t2.getBoundingClientRect(), { left: o3, top: a3 } = r3;
            null == n2 || n2(i3 - o3, s3 - a3);
          }
          l2();
        }, v2 = (t3) => {
          a2.delete(t3.pointerId), t3.relatedTarget && t3.relatedTarget !== document.documentElement || g2(t3);
        }, b2 = (t3) => {
          p2 && (t3.stopPropagation(), t3.preventDefault());
        }, y2 = (t3) => {
          t3.defaultPrevented || a2.size > 1 || p2 && t3.preventDefault();
        };
        document.addEventListener("pointermove", f2), document.addEventListener("pointerup", g2), document.addEventListener("pointerout", v2), document.addEventListener("pointercancel", v2), document.addEventListener("touchmove", y2, { passive: false }), document.addEventListener("click", b2, { capture: true }), l2 = () => {
          document.removeEventListener("pointermove", f2), document.removeEventListener("pointerup", g2), document.removeEventListener("pointerout", v2), document.removeEventListener("pointercancel", v2), document.removeEventListener("touchmove", y2), setTimeout(() => {
            document.removeEventListener("click", b2, { capture: true });
          }, 10);
        };
      };
      return t2.addEventListener("pointerdown", c2), () => {
        l2(), t2.removeEventListener("pointerdown", c2), a2.clear();
      };
    }(this.wrapper, (t2, e2, i2) => {
      const n2 = this.wrapper.getBoundingClientRect().width;
      this.emit("drag", h(i2 / n2));
    }, (t2) => {
      this.isDragging = true;
      const e2 = this.wrapper.getBoundingClientRect().width;
      this.emit("dragstart", h(t2 / e2));
    }, (t2) => {
      this.isDragging = false;
      const e2 = this.wrapper.getBoundingClientRect().width;
      this.emit("dragend", h(t2 / e2));
    }), this.subscriptions.push(this.dragUnsubscribe));
  }
  initHtml() {
    const t2 = document.createElement("div"), e2 = t2.attachShadow({ mode: "open" }), i2 = this.options.cspNonce && "string" == typeof this.options.cspNonce ? this.options.cspNonce.replace(/"/g, "") : "";
    return e2.innerHTML = `
      <style${i2 ? ` nonce="${i2}"` : ""}>
        :host {
          user-select: none;
          min-width: 1px;
        }
        :host audio {
          display: block;
          width: 100%;
        }
        :host .scroll {
          overflow-x: auto;
          overflow-y: hidden;
          width: 100%;
          position: relative;
        }
        :host .noScrollbar {
          scrollbar-color: transparent;
          scrollbar-width: none;
        }
        :host .noScrollbar::-webkit-scrollbar {
          display: none;
          -webkit-appearance: none;
        }
        :host .wrapper {
          position: relative;
          overflow: visible;
          z-index: 2;
        }
        :host .canvases {
          min-height: ${this.getHeight(this.options.height, this.options.splitChannels)}px;
          pointer-events: none;
        }
        :host .canvases > div {
          position: relative;
        }
        :host canvas {
          display: block;
          position: absolute;
          top: 0;
          image-rendering: pixelated;
        }
        :host .progress {
          pointer-events: none;
          position: absolute;
          z-index: 2;
          top: 0;
          left: 0;
          width: 0;
          height: 100%;
          overflow: hidden;
        }
        :host .progress > div {
          position: relative;
        }
        :host .cursor {
          pointer-events: none;
          position: absolute;
          z-index: 5;
          top: 0;
          left: 0;
          height: 100%;
          border-radius: 2px;
        }
      </style>

      <div class="scroll" part="scroll">
        <div class="wrapper" part="wrapper">
          <div class="canvases" part="canvases"></div>
          <div class="progress" part="progress"></div>
          <div class="cursor" part="cursor"></div>
        </div>
      </div>
    `, [t2, e2];
  }
  setOptions(t2) {
    if (this.options.container !== t2.container) {
      const e2 = this.parentFromOptionsContainer(t2.container);
      e2.appendChild(this.container), this.parent = e2;
    }
    true !== t2.dragToSeek && "object" != typeof this.options.dragToSeek || this.initDrag(), this.options = t2, this.reRender();
  }
  getWrapper() {
    return this.wrapper;
  }
  getWidth() {
    return this.scrollContainer.clientWidth;
  }
  getScroll() {
    return this.scrollContainer.scrollLeft;
  }
  setScroll(t2) {
    this.scrollContainer.scrollLeft = t2;
  }
  setScrollPercentage(t2) {
    const { scrollWidth: e2 } = this.scrollContainer, i2 = e2 * t2;
    this.setScroll(i2);
  }
  destroy() {
    var t2;
    this.subscriptions.forEach((t3) => t3()), this.container.remove(), this.resizeObserver && (this.resizeObserver.disconnect(), this.resizeObserver = null), null === (t2 = this.unsubscribeOnScroll) || void 0 === t2 || t2.forEach((t3) => t3()), this.unsubscribeOnScroll = [];
  }
  createDelay(t2 = 10) {
    let e2, i2;
    const n2 = () => {
      e2 && (clearTimeout(e2), e2 = void 0), i2 && (i2(), i2 = void 0);
    };
    return this.timeouts.push(n2), () => new Promise((s2, r2) => {
      n2(), i2 = r2, e2 = setTimeout(() => {
        e2 = void 0, i2 = void 0, s2();
      }, t2);
    });
  }
  getHeight(t2, e2) {
    var i2;
    const n2 = (null === (i2 = this.audioData) || void 0 === i2 ? void 0 : i2.numberOfChannels) || 1;
    return function({ optionsHeight: t3, optionsSplitChannels: e3, parentHeight: i3, numberOfChannels: n3, defaultHeight: s2 = 128 }) {
      if (null == t3) return s2;
      const r2 = Number(t3);
      if (!isNaN(r2)) return r2;
      if ("auto" === t3) {
        const t4 = i3 || s2;
        return (null == e3 ? void 0 : e3.every((t5) => !t5.overlay)) ? t4 / n3 : t4;
      }
      return s2;
    }({ optionsHeight: t2, optionsSplitChannels: e2, parentHeight: this.parent.clientHeight, numberOfChannels: n2, defaultHeight: 128 });
  }
  convertColorValues(t2) {
    return function(t3, e2) {
      if (!Array.isArray(t3)) return t3 || "";
      if (0 === t3.length) return "#999";
      if (t3.length < 2) return t3[0] || "";
      const i2 = document.createElement("canvas"), n2 = i2.getContext("2d"), s2 = i2.height * e2, r2 = n2.createLinearGradient(0, 0, 0, s2 || e2), o2 = 1 / (t3.length - 1);
      return t3.forEach((t4, e3) => {
        r2.addColorStop(e3 * o2, t4);
      }), r2;
    }(t2, this.getPixelRatio());
  }
  getPixelRatio() {
    return t2 = window.devicePixelRatio, Math.max(1, t2 || 1);
    var t2;
  }
  renderBarWaveform(t2, e2, i2, n2) {
    const { width: s2, height: r2 } = i2.canvas, { halfHeight: o2, barWidth: a2, barRadius: h2, barIndexScale: d2, barSpacing: u2 } = function({ width: t3, height: e3, length: i3, options: n3, pixelRatio: s3 }) {
      const r3 = e3 / 2, o3 = n3.barWidth ? n3.barWidth * s3 : 1, a3 = n3.barGap ? n3.barGap * s3 : n3.barWidth ? o3 / 2 : 0, h3 = o3 + a3 || 1;
      return { halfHeight: r3, barWidth: o3, barGap: a3, barRadius: n3.barRadius || 0, barIndexScale: i3 > 0 ? t3 / h3 / i3 : 0, barSpacing: h3 };
    }({ width: s2, height: r2, length: (t2[0] || []).length, options: e2, pixelRatio: this.getPixelRatio() }), p2 = function({ channelData: t3, barIndexScale: e3, barSpacing: i3, barWidth: n3, halfHeight: s3, vScale: r3, canvasHeight: o3, barAlign: a3 }) {
      const h3 = t3[0] || [], d3 = t3[1] || h3, u3 = h3.length, p3 = [];
      let m2 = 0, f2 = 0, g2 = 0;
      for (let t4 = 0; t4 <= u3; t4++) {
        const u4 = Math.round(t4 * e3);
        if (u4 > m2) {
          const { topHeight: t5, totalHeight: e4 } = l({ maxTop: f2, maxBottom: g2, halfHeight: s3, vScale: r3 }), h4 = c({ barAlign: a3, halfHeight: s3, topHeight: t5, totalHeight: e4, canvasHeight: o3 });
          p3.push({ x: m2 * i3, y: h4, width: n3, height: e4 }), m2 = u4, f2 = 0, g2 = 0;
        }
        const v2 = Math.abs(h3[t4] || 0), b2 = Math.abs(d3[t4] || 0);
        v2 > f2 && (f2 = v2), b2 > g2 && (g2 = b2);
      }
      return p3;
    }({ channelData: t2, barIndexScale: d2, barSpacing: u2, barWidth: a2, halfHeight: o2, vScale: n2, canvasHeight: r2, barAlign: e2.barAlign });
    i2.beginPath();
    for (const t3 of p2) h2 && "roundRect" in i2 ? i2.roundRect(t3.x, t3.y, t3.width, t3.height, h2) : i2.rect(t3.x, t3.y, t3.width, t3.height);
    i2.fill(), i2.closePath();
  }
  renderLineWaveform(t2, e2, i2, n2) {
    const { width: s2, height: r2 } = i2.canvas, o2 = function({ channelData: t3, width: e3, height: i3, vScale: n3 }) {
      const s3 = i3 / 2, r3 = t3[0] || [];
      return [r3, t3[1] || r3].map((t4, i4) => {
        const r4 = t4.length, o3 = r4 ? e3 / r4 : 0, a2 = s3, h2 = 0 === i4 ? -1 : 1, l2 = [{ x: 0, y: a2 }];
        let c2 = 0, d2 = 0;
        for (let e4 = 0; e4 <= r4; e4++) {
          const i5 = Math.round(e4 * o3);
          if (i5 > c2) {
            const t5 = a2 + (Math.round(d2 * s3 * n3) || 1) * h2;
            l2.push({ x: c2, y: t5 }), c2 = i5, d2 = 0;
          }
          const r5 = Math.abs(t4[e4] || 0);
          r5 > d2 && (d2 = r5);
        }
        return l2.push({ x: c2, y: a2 }), l2;
      });
    }({ channelData: t2, width: s2, height: r2, vScale: n2 });
    i2.beginPath();
    for (const t3 of o2) if (t3.length) {
      i2.moveTo(t3[0].x, t3[0].y);
      for (let e3 = 1; e3 < t3.length; e3++) {
        const n3 = t3[e3];
        i2.lineTo(n3.x, n3.y);
      }
    }
    i2.fill(), i2.closePath();
  }
  renderWaveform(t2, e2, i2) {
    if (i2.fillStyle = this.convertColorValues(e2.waveColor), e2.renderFunction) return void e2.renderFunction(t2, i2);
    const n2 = function({ channelData: t3, barHeight: e3, normalize: i3 }) {
      var n3;
      const s2 = e3 || 1;
      if (!i3) return s2;
      const r2 = t3[0];
      if (!r2 || 0 === r2.length) return s2;
      let o2 = 0;
      for (let t4 = 0; t4 < r2.length; t4++) {
        const e4 = null !== (n3 = r2[t4]) && void 0 !== n3 ? n3 : 0, i4 = Math.abs(e4);
        i4 > o2 && (o2 = i4);
      }
      return o2 ? s2 / o2 : s2;
    }({ channelData: t2, barHeight: e2.barHeight, normalize: e2.normalize });
    u(e2) ? this.renderBarWaveform(t2, e2, i2, n2) : this.renderLineWaveform(t2, e2, i2, n2);
  }
  renderSingleCanvas(t2, e2, i2, n2, s2, r2, o2) {
    const a2 = this.getPixelRatio(), h2 = document.createElement("canvas");
    h2.width = Math.round(i2 * a2), h2.height = Math.round(n2 * a2), h2.style.width = `${i2}px`, h2.style.height = `${n2}px`, h2.style.left = `${Math.round(s2)}px`, r2.appendChild(h2);
    const l2 = h2.getContext("2d");
    if (e2.renderFunction ? (l2.fillStyle = this.convertColorValues(e2.waveColor), e2.renderFunction(t2, l2)) : this.renderWaveform(t2, e2, l2), h2.width > 0 && h2.height > 0) {
      const t3 = h2.cloneNode(), i3 = t3.getContext("2d");
      i3.drawImage(h2, 0, 0), i3.globalCompositeOperation = "source-in", i3.fillStyle = this.convertColorValues(e2.progressColor), i3.fillRect(0, 0, h2.width, h2.height), o2.appendChild(t3);
    }
  }
  renderMultiCanvas(t2, e2, i2, n2, s2, r2) {
    const o2 = this.getPixelRatio(), { clientWidth: a2 } = this.scrollContainer, h2 = i2 / o2, l2 = function({ clientWidth: t3, totalWidth: e3, options: i3 }) {
      return p(Math.min(8e3, t3, e3), i3);
    }({ clientWidth: a2, totalWidth: h2, options: e2 });
    let c2 = {};
    if (0 === l2) return;
    const d2 = (i3) => {
      if (i3 < 0 || i3 >= u2) return;
      if (c2[i3]) return;
      c2[i3] = true;
      const o3 = i3 * l2;
      let a3 = Math.min(h2 - o3, l2);
      if (a3 = p(a3, e2), a3 <= 0) return;
      const d3 = function({ channelData: t3, offset: e3, clampedWidth: i4, totalWidth: n3 }) {
        return t3.map((t4) => {
          const s3 = Math.floor(e3 / n3 * t4.length), r3 = Math.floor((e3 + i4) / n3 * t4.length);
          return t4.slice(s3, r3);
        });
      }({ channelData: t2, offset: o3, clampedWidth: a3, totalWidth: h2 });
      this.renderSingleCanvas(d3, e2, a3, n2, o3, s2, r2);
    }, u2 = Math.ceil(h2 / l2);
    if (!this.isScrollable) {
      for (let t3 = 0; t3 < u2; t3++) d2(t3);
      return;
    }
    if (m({ scrollLeft: this.scrollContainer.scrollLeft, totalWidth: h2, numCanvases: u2 }).forEach((t3) => d2(t3)), u2 > 1) {
      const t3 = this.on("scroll", () => {
        const { scrollLeft: t4 } = this.scrollContainer;
        Object.keys(c2).length > 10 && (s2.innerHTML = "", r2.innerHTML = "", c2 = {}), m({ scrollLeft: t4, totalWidth: h2, numCanvases: u2 }).forEach((t5) => d2(t5));
      });
      this.unsubscribeOnScroll.push(t3);
    }
  }
  renderChannel(t2, e2, i2, n2) {
    var { overlay: s2 } = e2, r2 = function(t3, e3) {
      var i3 = {};
      for (var n3 in t3) Object.prototype.hasOwnProperty.call(t3, n3) && e3.indexOf(n3) < 0 && (i3[n3] = t3[n3]);
      if (null != t3 && "function" == typeof Object.getOwnPropertySymbols) {
        var s3 = 0;
        for (n3 = Object.getOwnPropertySymbols(t3); s3 < n3.length; s3++) e3.indexOf(n3[s3]) < 0 && Object.prototype.propertyIsEnumerable.call(t3, n3[s3]) && (i3[n3[s3]] = t3[n3[s3]]);
      }
      return i3;
    }(e2, ["overlay"]);
    const o2 = document.createElement("div"), a2 = this.getHeight(r2.height, r2.splitChannels);
    o2.style.height = `${a2}px`, s2 && n2 > 0 && (o2.style.marginTop = `-${a2}px`), this.canvasWrapper.style.minHeight = `${a2}px`, this.canvasWrapper.appendChild(o2);
    const h2 = o2.cloneNode();
    this.progressWrapper.appendChild(h2), this.renderMultiCanvas(t2, r2, i2, a2, o2, h2);
  }
  render(e2) {
    return t(this, void 0, void 0, function* () {
      var t2;
      this.timeouts.forEach((t3) => t3()), this.timeouts = [], this.canvasWrapper.innerHTML = "", this.progressWrapper.innerHTML = "", null != this.options.width && (this.scrollContainer.style.width = "number" == typeof this.options.width ? `${this.options.width}px` : this.options.width);
      const i2 = this.getPixelRatio(), n2 = this.scrollContainer.clientWidth, { scrollWidth: s2, isScrollable: r2, useParentWidth: o2, width: a2 } = function({ duration: t3, minPxPerSec: e3 = 0, parentWidth: i3, fillParent: n3, pixelRatio: s3 }) {
        const r3 = Math.ceil(t3 * e3), o3 = r3 > i3, a3 = Boolean(n3 && !o3);
        return { scrollWidth: r3, isScrollable: o3, useParentWidth: a3, width: (a3 ? i3 : r3) * s3 };
      }({ duration: e2.duration, minPxPerSec: this.options.minPxPerSec || 0, parentWidth: n2, fillParent: this.options.fillParent, pixelRatio: i2 });
      if (this.isScrollable = r2, this.wrapper.style.width = o2 ? "100%" : `${s2}px`, this.scrollContainer.style.overflowX = this.isScrollable ? "auto" : "hidden", this.scrollContainer.classList.toggle("noScrollbar", !!this.options.hideScrollbar), this.cursor.style.backgroundColor = `${this.options.cursorColor || this.options.progressColor}`, this.cursor.style.width = `${this.options.cursorWidth}px`, this.audioData = e2, this.emit("render"), this.options.splitChannels) for (let i3 = 0; i3 < e2.numberOfChannels; i3++) {
        const n3 = Object.assign(Object.assign({}, this.options), null === (t2 = this.options.splitChannels) || void 0 === t2 ? void 0 : t2[i3]);
        this.renderChannel([e2.getChannelData(i3)], n3, a2, i3);
      }
      else {
        const t3 = [e2.getChannelData(0)];
        e2.numberOfChannels > 1 && t3.push(e2.getChannelData(1)), this.renderChannel(t3, this.options, a2, 0);
      }
      Promise.resolve().then(() => this.emit("rendered"));
    });
  }
  reRender() {
    if (this.unsubscribeOnScroll.forEach((t3) => t3()), this.unsubscribeOnScroll = [], !this.audioData) return;
    const { scrollWidth: t2 } = this.scrollContainer, { right: e2 } = this.progressWrapper.getBoundingClientRect();
    if (this.render(this.audioData), this.isScrollable && t2 !== this.scrollContainer.scrollWidth) {
      const { right: t3 } = this.progressWrapper.getBoundingClientRect(), i2 = function(t4) {
        const e3 = 2 * t4;
        return (e3 < 0 ? Math.floor(e3) : Math.ceil(e3)) / 2;
      }(t3 - e2);
      this.scrollContainer.scrollLeft += i2;
    }
  }
  zoom(t2) {
    this.options.minPxPerSec = t2, this.reRender();
  }
  scrollIntoView(t2, e2 = false) {
    const { scrollLeft: i2, scrollWidth: n2, clientWidth: s2 } = this.scrollContainer, r2 = t2 * n2, o2 = i2, a2 = i2 + s2, h2 = s2 / 2;
    if (this.isDragging) {
      const t3 = 30;
      r2 + t3 > a2 ? this.scrollContainer.scrollLeft += t3 : r2 - t3 < o2 && (this.scrollContainer.scrollLeft -= t3);
    } else {
      (r2 < o2 || r2 > a2) && (this.scrollContainer.scrollLeft = r2 - (this.options.autoCenter ? h2 : 0));
      const t3 = r2 - i2 - h2;
      e2 && this.options.autoCenter && t3 > 0 && (this.scrollContainer.scrollLeft += t3);
    }
    {
      const t3 = this.scrollContainer.scrollLeft, { startX: e3, endX: i3 } = f({ scrollLeft: t3, scrollWidth: n2, clientWidth: s2 });
      this.emit("scroll", e3, i3, t3, t3 + s2);
    }
  }
  renderProgress(t2, e2) {
    if (isNaN(t2)) return;
    const i2 = 100 * t2;
    this.canvasWrapper.style.clipPath = `polygon(${i2}% 0%, 100% 0%, 100% 100%, ${i2}% 100%)`, this.progressWrapper.style.width = `${i2}%`, this.cursor.style.left = `${i2}%`, this.cursor.style.transform = this.options.cursorWidth ? `translateX(-${t2 * this.options.cursorWidth}px)` : "", this.isScrollable && this.options.autoScroll && this.scrollIntoView(t2, e2);
  }
  exportImage(e2, i2, n2) {
    return t(this, void 0, void 0, function* () {
      const t2 = this.canvasWrapper.querySelectorAll("canvas");
      if (!t2.length) throw new Error("No waveform data");
      if ("dataURL" === n2) {
        const n3 = Array.from(t2).map((t3) => t3.toDataURL(e2, i2));
        return Promise.resolve(n3);
      }
      return Promise.all(Array.from(t2).map((t3) => new Promise((n3, s2) => {
        t3.toBlob((t4) => {
          t4 ? n3(t4) : s2(new Error("Could not export image"));
        }, e2, i2);
      })));
    });
  }
};
var v = class extends e {
  constructor() {
    super(...arguments), this.animationFrameId = null, this.isRunning = false;
  }
  start() {
    if (this.isRunning) return;
    this.isRunning = true;
    const t2 = () => {
      this.isRunning && (this.emit("tick"), this.animationFrameId = requestAnimationFrame(t2));
    };
    t2();
  }
  stop() {
    this.isRunning = false, null !== this.animationFrameId && (cancelAnimationFrame(this.animationFrameId), this.animationFrameId = null);
  }
  destroy() {
    this.stop();
  }
};
var b = class extends e {
  constructor(t2 = new AudioContext()) {
    super(), this.bufferNode = null, this.playStartTime = 0, this.playedDuration = 0, this._muted = false, this._playbackRate = 1, this._duration = void 0, this.buffer = null, this.currentSrc = "", this.paused = true, this.crossOrigin = null, this.seeking = false, this.autoplay = false, this.addEventListener = this.on, this.removeEventListener = this.un, this.audioContext = t2, this.gainNode = this.audioContext.createGain(), this.gainNode.connect(this.audioContext.destination);
  }
  load() {
    return t(this, void 0, void 0, function* () {
    });
  }
  get src() {
    return this.currentSrc;
  }
  set src(t2) {
    if (this.currentSrc = t2, this._duration = void 0, !t2) return this.buffer = null, void this.emit("emptied");
    fetch(t2).then((e2) => {
      if (e2.status >= 400) throw new Error(`Failed to fetch ${t2}: ${e2.status} (${e2.statusText})`);
      return e2.arrayBuffer();
    }).then((e2) => this.currentSrc !== t2 ? null : this.audioContext.decodeAudioData(e2)).then((e2) => {
      this.currentSrc === t2 && (this.buffer = e2, this.emit("loadedmetadata"), this.emit("canplay"), this.autoplay && this.play());
    }).catch((t3) => {
      console.error("WebAudioPlayer load error:", t3);
    });
  }
  _play() {
    if (!this.paused) return;
    this.paused = false, this.bufferNode && (this.bufferNode.onended = null, this.bufferNode.disconnect()), this.bufferNode = this.audioContext.createBufferSource(), this.buffer && (this.bufferNode.buffer = this.buffer), this.bufferNode.playbackRate.value = this._playbackRate, this.bufferNode.connect(this.gainNode);
    let t2 = this.playedDuration * this._playbackRate;
    (t2 >= this.duration || t2 < 0) && (t2 = 0, this.playedDuration = 0), this.bufferNode.start(this.audioContext.currentTime, t2), this.playStartTime = this.audioContext.currentTime, this.bufferNode.onended = () => {
      this.currentTime >= this.duration && (this.pause(), this.emit("ended"));
    };
  }
  _pause() {
    var t2;
    this.paused = true, null === (t2 = this.bufferNode) || void 0 === t2 || t2.stop(), this.playedDuration += this.audioContext.currentTime - this.playStartTime;
  }
  play() {
    return t(this, void 0, void 0, function* () {
      this.paused && (this._play(), this.emit("play"));
    });
  }
  pause() {
    this.paused || (this._pause(), this.emit("pause"));
  }
  stopAt(t2) {
    const e2 = t2 - this.currentTime, i2 = this.bufferNode;
    null == i2 || i2.stop(this.audioContext.currentTime + e2), null == i2 || i2.addEventListener("ended", () => {
      i2 === this.bufferNode && (this.bufferNode = null, this.pause());
    }, { once: true });
  }
  setSinkId(e2) {
    return t(this, void 0, void 0, function* () {
      return this.audioContext.setSinkId(e2);
    });
  }
  get playbackRate() {
    return this._playbackRate;
  }
  set playbackRate(t2) {
    this._playbackRate = t2, this.bufferNode && (this.bufferNode.playbackRate.value = t2);
  }
  get currentTime() {
    return (this.paused ? this.playedDuration : this.playedDuration + (this.audioContext.currentTime - this.playStartTime)) * this._playbackRate;
  }
  set currentTime(t2) {
    const e2 = !this.paused;
    e2 && this._pause(), this.playedDuration = t2 / this._playbackRate, e2 && this._play(), this.emit("seeking"), this.emit("timeupdate");
  }
  get duration() {
    var t2, e2;
    return null !== (t2 = this._duration) && void 0 !== t2 ? t2 : (null === (e2 = this.buffer) || void 0 === e2 ? void 0 : e2.duration) || 0;
  }
  set duration(t2) {
    this._duration = t2;
  }
  get volume() {
    return this.gainNode.gain.value;
  }
  set volume(t2) {
    this.gainNode.gain.value = t2, this.emit("volumechange");
  }
  get muted() {
    return this._muted;
  }
  set muted(t2) {
    this._muted !== t2 && (this._muted = t2, this._muted ? this.gainNode.disconnect() : this.gainNode.connect(this.audioContext.destination));
  }
  canPlayType(t2) {
    return /^(audio|video)\//.test(t2);
  }
  getGainNode() {
    return this.gainNode;
  }
  getChannelData() {
    const t2 = [];
    if (!this.buffer) return t2;
    const e2 = this.buffer.numberOfChannels;
    for (let i2 = 0; i2 < e2; i2++) t2.push(this.buffer.getChannelData(i2));
    return t2;
  }
  removeAttribute(t2) {
    switch (t2) {
      case "src":
        this.src = "";
        break;
      case "playbackRate":
        this.playbackRate = 0;
        break;
      case "currentTime":
        this.currentTime = 0;
        break;
      case "duration":
        this.duration = 0;
        break;
      case "volume":
        this.volume = 0;
        break;
      case "muted":
        this.muted = false;
    }
  }
};
var y = { waveColor: "#999", progressColor: "#555", cursorWidth: 1, minPxPerSec: 0, fillParent: true, interact: true, dragToSeek: false, autoScroll: true, autoCenter: true, sampleRate: 8e3 };
var C = class _C extends a {
  static create(t2) {
    return new _C(t2);
  }
  constructor(t2) {
    const e2 = t2.media || ("WebAudio" === t2.backend ? new b() : void 0);
    super({ media: e2, mediaControls: t2.mediaControls, autoplay: t2.autoplay, playbackRate: t2.audioRate }), this.plugins = [], this.decodedData = null, this.stopAtPosition = null, this.subscriptions = [], this.mediaSubscriptions = [], this.abortController = null, this.options = Object.assign({}, y, t2), this.timer = new v();
    const i2 = e2 ? void 0 : this.getMediaElement();
    this.renderer = new g(this.options, i2), this.initPlayerEvents(), this.initRendererEvents(), this.initTimerEvents(), this.initPlugins();
    const n2 = this.options.url || this.getSrc() || "";
    Promise.resolve().then(() => {
      this.emit("init");
      const { peaks: t3, duration: e3 } = this.options;
      (n2 || t3 && e3) && this.load(n2, t3, e3).catch((t4) => {
        this.emit("error", t4 instanceof Error ? t4 : new Error(String(t4)));
      });
    });
  }
  updateProgress(t2 = this.getCurrentTime()) {
    return this.renderer.renderProgress(t2 / this.getDuration(), this.isPlaying()), t2;
  }
  initTimerEvents() {
    this.subscriptions.push(this.timer.on("tick", () => {
      if (!this.isSeeking()) {
        const t2 = this.updateProgress();
        this.emit("timeupdate", t2), this.emit("audioprocess", t2), null != this.stopAtPosition && this.isPlaying() && t2 >= this.stopAtPosition && this.pause();
      }
    }));
  }
  initPlayerEvents() {
    this.isPlaying() && (this.emit("play"), this.timer.start()), this.mediaSubscriptions.push(this.onMediaEvent("timeupdate", () => {
      const t2 = this.updateProgress();
      this.emit("timeupdate", t2);
    }), this.onMediaEvent("play", () => {
      this.emit("play"), this.timer.start();
    }), this.onMediaEvent("pause", () => {
      this.emit("pause"), this.timer.stop(), this.stopAtPosition = null;
    }), this.onMediaEvent("emptied", () => {
      this.timer.stop(), this.stopAtPosition = null;
    }), this.onMediaEvent("ended", () => {
      this.emit("timeupdate", this.getDuration()), this.emit("finish"), this.stopAtPosition = null;
    }), this.onMediaEvent("seeking", () => {
      this.emit("seeking", this.getCurrentTime());
    }), this.onMediaEvent("error", () => {
      var t2;
      this.emit("error", null !== (t2 = this.getMediaElement().error) && void 0 !== t2 ? t2 : new Error("Media error")), this.stopAtPosition = null;
    }));
  }
  initRendererEvents() {
    this.subscriptions.push(this.renderer.on("click", (t2, e2) => {
      this.options.interact && (this.seekTo(t2), this.emit("interaction", t2 * this.getDuration()), this.emit("click", t2, e2));
    }), this.renderer.on("dblclick", (t2, e2) => {
      this.emit("dblclick", t2, e2);
    }), this.renderer.on("scroll", (t2, e2, i2, n2) => {
      const s2 = this.getDuration();
      this.emit("scroll", t2 * s2, e2 * s2, i2, n2);
    }), this.renderer.on("render", () => {
      this.emit("redraw");
    }), this.renderer.on("rendered", () => {
      this.emit("redrawcomplete");
    }), this.renderer.on("dragstart", (t2) => {
      this.emit("dragstart", t2);
    }), this.renderer.on("dragend", (t2) => {
      this.emit("dragend", t2);
    }), this.renderer.on("resize", () => {
      this.emit("resize");
    }));
    {
      let t2;
      const e2 = this.renderer.on("drag", (e3) => {
        var i2;
        if (!this.options.interact) return;
        this.renderer.renderProgress(e3), clearTimeout(t2);
        let n2 = 0;
        const s2 = this.options.dragToSeek;
        this.isPlaying() ? n2 = 0 : true === s2 ? n2 = 200 : s2 && "object" == typeof s2 && (n2 = null !== (i2 = s2.debounceTime) && void 0 !== i2 ? i2 : 200), t2 = setTimeout(() => {
          this.seekTo(e3);
        }, n2), this.emit("interaction", e3 * this.getDuration()), this.emit("drag", e3);
      });
      this.subscriptions.push(() => {
        clearTimeout(t2), e2();
      });
    }
  }
  initPlugins() {
    var t2;
    (null === (t2 = this.options.plugins) || void 0 === t2 ? void 0 : t2.length) && this.options.plugins.forEach((t3) => {
      this.registerPlugin(t3);
    });
  }
  unsubscribePlayerEvents() {
    this.mediaSubscriptions.forEach((t2) => t2()), this.mediaSubscriptions = [];
  }
  setOptions(t2) {
    this.options = Object.assign({}, this.options, t2), t2.duration && !t2.peaks && (this.decodedData = i.createBuffer(this.exportPeaks(), t2.duration)), t2.peaks && t2.duration && (this.decodedData = i.createBuffer(t2.peaks, t2.duration)), this.renderer.setOptions(this.options), t2.audioRate && this.setPlaybackRate(t2.audioRate), null != t2.mediaControls && (this.getMediaElement().controls = t2.mediaControls);
  }
  registerPlugin(t2) {
    if (this.plugins.includes(t2)) return t2;
    t2._init(this), this.plugins.push(t2);
    const e2 = t2.once("destroy", () => {
      this.plugins = this.plugins.filter((e3) => e3 !== t2), this.subscriptions = this.subscriptions.filter((t3) => t3 !== e2);
    });
    return this.subscriptions.push(e2), t2;
  }
  unregisterPlugin(t2) {
    this.plugins = this.plugins.filter((e2) => e2 !== t2), t2.destroy();
  }
  getWrapper() {
    return this.renderer.getWrapper();
  }
  getWidth() {
    return this.renderer.getWidth();
  }
  getScroll() {
    return this.renderer.getScroll();
  }
  setScroll(t2) {
    return this.renderer.setScroll(t2);
  }
  setScrollTime(t2) {
    const e2 = t2 / this.getDuration();
    this.renderer.setScrollPercentage(e2);
  }
  getActivePlugins() {
    return this.plugins;
  }
  loadAudio(e2, n2, s2, r2) {
    return t(this, void 0, void 0, function* () {
      var t2;
      if (this.emit("load", e2), !this.options.media && this.isPlaying() && this.pause(), this.decodedData = null, this.stopAtPosition = null, null === (t2 = this.abortController) || void 0 === t2 || t2.abort(), this.abortController = null, !n2 && !s2) {
        const t3 = this.options.fetchParams || {};
        window.AbortController && !t3.signal && (this.abortController = new AbortController(), t3.signal = this.abortController.signal);
        const i2 = (t4) => this.emit("loading", t4);
        n2 = yield o.fetchBlob(e2, i2, t3);
        const s3 = this.options.blobMimeType;
        s3 && (n2 = new Blob([n2], { type: s3 }));
      }
      this.setSrc(e2, n2);
      const a2 = yield new Promise((t3) => {
        const e3 = r2 || this.getDuration();
        e3 ? t3(e3) : this.mediaSubscriptions.push(this.onMediaEvent("loadedmetadata", () => t3(this.getDuration()), { once: true }));
      });
      if (!e2 && !n2) {
        const t3 = this.getMediaElement();
        t3 instanceof b && (t3.duration = a2);
      }
      if (s2) this.decodedData = i.createBuffer(s2, a2 || 0);
      else if (n2) {
        const t3 = yield n2.arrayBuffer();
        this.decodedData = yield i.decode(t3, this.options.sampleRate);
      }
      this.decodedData && (this.emit("decode", this.getDuration()), this.renderer.render(this.decodedData)), this.emit("ready", this.getDuration());
    });
  }
  load(e2, i2, n2) {
    return t(this, void 0, void 0, function* () {
      try {
        return yield this.loadAudio(e2, void 0, i2, n2);
      } catch (t2) {
        throw this.emit("error", t2), t2;
      }
    });
  }
  loadBlob(e2, i2, n2) {
    return t(this, void 0, void 0, function* () {
      try {
        return yield this.loadAudio("", e2, i2, n2);
      } catch (t2) {
        throw this.emit("error", t2), t2;
      }
    });
  }
  zoom(t2) {
    if (!this.decodedData) throw new Error("No audio loaded");
    this.renderer.zoom(t2), this.emit("zoom", t2);
  }
  getDecodedData() {
    return this.decodedData;
  }
  exportPeaks({ channels: t2 = 2, maxLength: e2 = 8e3, precision: i2 = 1e4 } = {}) {
    if (!this.decodedData) throw new Error("The audio has not been decoded yet");
    const n2 = Math.min(t2, this.decodedData.numberOfChannels), s2 = [];
    for (let t3 = 0; t3 < n2; t3++) {
      const n3 = this.decodedData.getChannelData(t3), r2 = [], o2 = n3.length / e2;
      for (let t4 = 0; t4 < e2; t4++) {
        const e3 = n3.slice(Math.floor(t4 * o2), Math.ceil((t4 + 1) * o2));
        let s3 = 0;
        for (let t5 = 0; t5 < e3.length; t5++) {
          const i3 = e3[t5];
          Math.abs(i3) > Math.abs(s3) && (s3 = i3);
        }
        r2.push(Math.round(s3 * i2) / i2);
      }
      s2.push(r2);
    }
    return s2;
  }
  getDuration() {
    let t2 = super.getDuration() || 0;
    return 0 !== t2 && t2 !== 1 / 0 || !this.decodedData || (t2 = this.decodedData.duration), t2;
  }
  toggleInteraction(t2) {
    this.options.interact = t2;
  }
  setTime(t2) {
    this.stopAtPosition = null, super.setTime(t2), this.updateProgress(t2), this.emit("timeupdate", t2);
  }
  seekTo(t2) {
    const e2 = this.getDuration() * t2;
    this.setTime(e2);
  }
  play(e2, i2) {
    const n2 = Object.create(null, { play: { get: () => super.play } });
    return t(this, void 0, void 0, function* () {
      null != e2 && this.setTime(e2);
      const t2 = yield n2.play.call(this);
      return null != i2 && (this.media instanceof b ? this.media.stopAt(i2) : this.stopAtPosition = i2), t2;
    });
  }
  playPause() {
    return t(this, void 0, void 0, function* () {
      return this.isPlaying() ? this.pause() : this.play();
    });
  }
  stop() {
    this.pause(), this.setTime(0);
  }
  skip(t2) {
    this.setTime(this.getCurrentTime() + t2);
  }
  empty() {
    this.load("", [[0]], 1e-3);
  }
  setMediaElement(t2) {
    this.unsubscribePlayerEvents(), super.setMediaElement(t2), this.initPlayerEvents();
  }
  exportImage() {
    return t(this, arguments, void 0, function* (t2 = "image/png", e2 = 1, i2 = "dataURL") {
      return this.renderer.exportImage(t2, e2, i2);
    });
  }
  destroy() {
    var t2;
    this.emit("destroy"), null === (t2 = this.abortController) || void 0 === t2 || t2.abort(), this.plugins.forEach((t3) => t3.destroy()), this.subscriptions.forEach((t3) => t3()), this.unsubscribePlayerEvents(), this.timer.destroy(), this.renderer.destroy(), super.destroy();
  }
};
C.BasePlugin = class extends e {
  constructor(t2) {
    super(), this.subscriptions = [], this.isDestroyed = false, this.options = t2;
  }
  onInit() {
  }
  _init(t2) {
    this.isDestroyed && (this.subscriptions = [], this.isDestroyed = false), this.wavesurfer = t2, this.onInit();
  }
  destroy() {
    this.emit("destroy"), this.subscriptions.forEach((t2) => t2()), this.subscriptions = [], this.isDestroyed = true, this.wavesurfer = void 0;
  }
}, C.dom = r;
export {
  C as default
};
//# sourceMappingURL=wavesurfer__js.js.map
